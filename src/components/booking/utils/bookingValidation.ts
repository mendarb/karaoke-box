import { supabase } from "@/lib/supabase";
import { toast } from "@/components/ui/use-toast";
import { addDays, startOfDay, format } from "date-fns";

export const checkTimeSlotAvailability = async (
  date: Date, 
  timeSlot: string, 
  duration: string
) => {
  console.log('üîç V√©rification de la disponibilit√© pour:', {
    date: format(date, 'yyyy-MM-dd'),
    timeSlot,
    duration
  });
  
  const requestedStartTime = parseInt(timeSlot);
  const requestedDuration = parseInt(duration);
  const requestedEndTime = requestedStartTime + requestedDuration;

  // V√©rifier si le cr√©neau demand√© ne d√©passe pas minuit
  if (requestedEndTime > 24) {
    console.log('‚ùå Le cr√©neau d√©passe minuit');
    toast({
      title: "Cr√©neau non disponible",
      description: "Le cr√©neau demand√© d√©passe minuit. Veuillez choisir un horaire plus t√¥t.",
      variant: "destructive",
    });
    return false;
  }

  // V√©rifier les param√®tres de r√©servation
  const { data: settingsData, error: settingsError } = await supabase
    .from('booking_settings')
    .select('*')
    .eq('key', 'booking_settings')
    .single();

  if (settingsError) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des param√®tres:', settingsError);
    return false;
  }

  const settings = settingsData.value;
  const today = startOfDay(new Date());
  const minDate = settings.isTestMode ? today : addDays(today, settings.bookingWindow?.startDays || 1);

  // V√©rifier le d√©lai minimum de r√©servation
  if (date < minDate) {
    console.log('‚ùå Date trop proche');
    toast({
      title: "Date non disponible",
      description: `Les r√©servations doivent √™tre faites au moins ${settings.bookingWindow?.startDays} jours √† l'avance.`,
      variant: "destructive",
    });
    return false;
  }

  const dayOfWeek = date.getDay().toString();
  const daySettings = settings.openingHours?.[dayOfWeek];

  // V√©rifier si le jour est ouvert
  if (!daySettings?.isOpen) {
    console.log('‚ùå Jour ferm√©');
    toast({
      title: "Jour non disponible",
      description: "Ce jour n'est pas ouvert aux r√©servations.",
      variant: "destructive",
    });
    return false;
  }

  // V√©rifier si le cr√©neau est dans les horaires d'ouverture
  const formattedTimeSlot = `${requestedStartTime}:00`;
  if (!daySettings.slots.includes(formattedTimeSlot)) {
    console.log('‚ùå Cr√©neau hors horaires d\'ouverture');
    toast({
      title: "Cr√©neau non disponible",
      description: "Ce cr√©neau n'est pas disponible √† la r√©servation.",
      variant: "destructive",
    });
    return false;
  }

  // V√©rifier les r√©servations existantes
  const { data: bookings, error } = await supabase
    .from('bookings')
    .select('*')
    .eq('date', format(date, 'yyyy-MM-dd'))
    .neq('status', 'cancelled')
    .eq('payment_status', 'paid') // Ne prendre en compte que les r√©servations pay√©es
    .is('deleted_at', null);

  if (error) {
    console.error('‚ùå Erreur lors de la v√©rification des disponibilit√©s:', error);
    return false;
  }

  const hasOverlap = bookings?.some(booking => {
    const existingStartTime = parseInt(booking.time_slot);
    const existingDuration = parseInt(booking.duration);
    const existingEndTime = existingStartTime + existingDuration;

    const overlap = (
      (requestedStartTime >= existingStartTime && requestedStartTime < existingEndTime) ||
      (requestedEndTime > existingStartTime && requestedEndTime <= existingEndTime) ||
      (requestedStartTime <= existingStartTime && requestedEndTime >= existingEndTime)
    );

    if (overlap) {
      console.log('‚ùå Chevauchement d√©tect√© avec la r√©servation:', {
        existingBooking: {
          start: existingStartTime,
          end: existingEndTime,
          status: booking.status,
          paymentStatus: booking.payment_status
        },
        requestedBooking: {
          start: requestedStartTime,
          end: requestedEndTime
        }
      });
    }
    return overlap;
  });

  if (hasOverlap) {
    toast({
      title: "Cr√©neau non disponible",
      description: "Ce cr√©neau chevauche une r√©servation existante. Veuillez choisir un autre horaire.",
      variant: "destructive",
    });
    return false;
  }

  console.log('‚úÖ Cr√©neau disponible');
  return true;
};